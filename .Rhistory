legend("bottomleft",inset = 0.01,legend=Players[rows],col=c(1:4,6),pch=15:18,horiz=T)
}
myplot(Salary,1:3)
myplot(Salary)
myplot <- function(data,rows=1:10)
{
Data <- data[rows,,drop=F]
matplot(t(Data),type="b",pch=15:18,col=c(1:4,6))
legend("bottomleft",inset = 0.01,legend=Players[rows],col=c(1:4,6),pch=15:18,horiz=F)
}
myplot(Salary)
myplot <- function(data,rows=1:10)
{
Data <- data[rows,,drop=F]
matplot(t(Data),type="b",pch=15:18,col=c(1:4,6))
legend("bottomleft",inset = 0.001,legend=Players[rows],col=c(1:4,6),pch=15:18,horiz=F)
}
myplot(Salary)
myplot <- function(data,rows=1:10)
{
Data <- data[rows,,drop=F]
matplot(t(Data),type="b",pch=15:18,col=c(1:4,6))
legend("bottomleft",inset = 0.00001,legend=Players[rows],col=c(1:4,6),pch=15:18,horiz=F)
}
myp
myplot <- function(data,rows=1:10)
{
Data <- data[rows,,drop=F]
matplot(t(Data),type="b",pch=15:18,col=c(1:4,6))
legend("bottomleft",inset = 0.00001,legend=Players[rows],col=c(1:4,6),pch=15:18,horiz=F)
}
myplot(Salary,1:3)
myplot(Salary)
myplot <- function(data,rows=1:10)
{
Data <- data[rows,,drop=F]
matplot(t(Data),type="b",pch=15:18,col=c(1:4,6))
legend("bottomleft",inset = 1,legend=Players[rows],col=c(1:4,6),pch=15:18,horiz=F)
}
myplot(Salary)
myplot <- function(data,rows=1:10)
{
Data <- data[rows,,drop=F]
matplot(t(Data),type="b",pch=15:18,col=c(1:4,6))
legend("bottomleft",inset = 0.1,legend=Players[rows],col=c(1:4,6),pch=15:18,horiz=F)
}
myplot(Salary)
Games
myplot(Salary/Games)
myplot <- function(data,rows=1:10)
{
Data <- data[rows,,drop=F]
matplot(t(Data),type="b",pch=15:18,col=c(1:4,6))
legend("bottomleft",inset = 0.001,legend=Players[rows],col=c(1:4,6),pch=15:18,horiz=F)
}
myplot(Salary,1:3)
myplot(Salary)
myplot(Salary/Games)
myplot(Salary)
myplot(Salary/Games)
myplot(Salary/Games)
#In Game matrices
myplot(MinutesPlayed)
myplot(points)
myplot(points)
myplot(Points)
#In game matrics normalised
myplot(FieldGoals/Games)
myplot(FieldGoads/FieldGoalAttempts)
myplot(FieldGoals/FieldGoalAttempts)
myplot(FieldGoalAttempts/Games)
myplot(Points/Games)
#Interesting observation
myplot(MinutesPlayed/Games)
myplot(Games)
#Time is valuable
myplot(FieldGoals/MinutesPlayed)
#player Style
myplot(Points/FieldGoals)
vector = 1:3
vector*5
stats<-read.csv(file.choose())
head(stats,5)
qplot(data=stats,x=Internet.users)
install.packages("ggplot2")
library("ggplot2")
?qplot
qplot(data=stats,x=Internet.users)
qplot(data=stats,x=Income.Group)
qplot(data=stats,x=Income.Group,Birth.rate)
qplot(data=stats,x=Income.Group,y=Birth.rate)
qplot(data=stats,x=Income.Group,y=Birth.rate
,geom="boxplot")
qplot(data=stats,x=Internet.users,y=Birth.rate,
size=I(2),color=Income.Group)
head(stats)
head(mydf)
rm(mydf)
mydf <- data.frame(Countries_2012_Dataset,Codes_2012_Dataset,Regions_2012_Dataset)
mydf <- data.frame("Country"=Countries_2012_Dataset,
"Code"=Codes_2012_Dataset,
"Region"=Regions_2012_Dataset)
head(mydf)
Countries_2012_Dataset <- c("Aruba","Afghanistan","Angola","Albania","United Arab Emirates","Argentina","Armenia","Antigua and Barbuda","Australia","Austria","Azerbaijan","Burundi","Belgium","Benin","Burkina Faso","Bangladesh","Bulgaria","Bahrain","Bahamas, The","Bosnia and Herzegovina","Belarus","Belize","Bermuda","Bolivia","Brazil","Barbados","Brunei Darussalam","Bhutan","Botswana","Central African Republic","Canada","Switzerland","Chile","China","Cote d'Ivoire","Cameroon","Congo, Rep.","Colombia","Comoros","Cabo Verde","Costa Rica","Cuba","Cayman Islands","Cyprus","Czech Republic","Germany","Djibouti","Denmark","Dominican Republic","Algeria","Ecuador","Egypt, Arab Rep.","Eritrea","Spain","Estonia","Ethiopia","Finland","Fiji","France","Micronesia, Fed. Sts.","Gabon","United Kingdom","Georgia","Ghana","Guinea","Gambia, The","Guinea-Bissau","Equatorial Guinea","Greece","Grenada","Greenland","Guatemala","Guam","Guyana","Hong Kong SAR, China","Honduras","Croatia","Haiti","Hungary","Indonesia","India","Ireland","Iran, Islamic Rep.","Iraq","Iceland","Israel","Italy","Jamaica","Jordan","Japan","Kazakhstan","Kenya","Kyrgyz Republic","Cambodia","Kiribati","Korea, Rep.","Kuwait","Lao PDR","Lebanon","Liberia","Libya","St. Lucia","Liechtenstein","Sri Lanka","Lesotho","Lithuania","Luxembourg","Latvia","Macao SAR, China","Morocco","Moldova","Madagascar","Maldives","Mexico","Macedonia, FYR","Mali","Malta","Myanmar","Montenegro","Mongolia","Mozambique","Mauritania","Mauritius","Malawi","Malaysia","Namibia","New Caledonia","Niger","Nigeria","Nicaragua","Netherlands","Norway","Nepal","New Zealand","Oman","Pakistan","Panama","Peru","Philippines","Papua New Guinea","Poland","Puerto Rico","Portugal","Paraguay","French Polynesia","Qatar","Romania","Russian Federation","Rwanda","Saudi Arabia","Sudan","Senegal","Singapore","Solomon Islands","Sierra Leone","El Salvador","Somalia","Serbia","South Sudan","Sao Tome and Principe","Suriname","Slovak Republic","Slovenia","Sweden","Swaziland","Seychelles","Syrian Arab Republic","Chad","Togo","Thailand","Tajikistan","Turkmenistan","Timor-Leste","Tonga","Trinidad and Tobago","Tunisia","Turkey","Tanzania","Uganda","Ukraine","Uruguay","United States","Uzbekistan","St. Vincent and the Grenadines","Venezuela, RB","Virgin Islands (U.S.)","Vietnam","Vanuatu","West Bank and Gaza","Samoa","Yemen, Rep.","South Africa","Congo, Dem. Rep.","Zambia","Zimbabwe")
Codes_2012_Dataset <- c("ABW","AFG","AGO","ALB","ARE","ARG","ARM","ATG","AUS","AUT","AZE","BDI","BEL","BEN","BFA","BGD","BGR","BHR","BHS","BIH","BLR","BLZ","BMU","BOL","BRA","BRB","BRN","BTN","BWA","CAF","CAN","CHE","CHL","CHN","CIV","CMR","COG","COL","COM","CPV","CRI","CUB","CYM","CYP","CZE","DEU","DJI","DNK","DOM","DZA","ECU","EGY","ERI","ESP","EST","ETH","FIN","FJI","FRA","FSM","GAB","GBR","GEO","GHA","GIN","GMB","GNB","GNQ","GRC","GRD","GRL","GTM","GUM","GUY","HKG","HND","HRV","HTI","HUN","IDN","IND","IRL","IRN","IRQ","ISL","ISR","ITA","JAM","JOR","JPN","KAZ","KEN","KGZ","KHM","KIR","KOR","KWT","LAO","LBN","LBR","LBY","LCA","LIE","LKA","LSO","LTU","LUX","LVA","MAC","MAR","MDA","MDG","MDV","MEX","MKD","MLI","MLT","MMR","MNE","MNG","MOZ","MRT","MUS","MWI","MYS","NAM","NCL","NER","NGA","NIC","NLD","NOR","NPL","NZL","OMN","PAK","PAN","PER","PHL","PNG","POL","PRI","PRT","PRY","PYF","QAT","ROU","RUS","RWA","SAU","SDN","SEN","SGP","SLB","SLE","SLV","SOM","SRB","SSD","STP","SUR","SVK","SVN","SWE","SWZ","SYC","SYR","TCD","TGO","THA","TJK","TKM","TLS","TON","TTO","TUN","TUR","TZA","UGA","UKR","URY","USA","UZB","VCT","VEN","VIR","VNM","VUT","PSE","WSM","YEM","ZAF","COD","ZMB","ZWE")
Regions_2012_Dataset <- c("The Americas","Asia","Africa","Europe","Middle East","The Americas","Asia","The Americas","Oceania","Europe","Asia","Africa","Europe","Africa","Africa","Asia","Europe","Middle East","The Americas","Europe","Europe","The Americas","The Americas","The Americas","The Americas","The Americas","Asia","Asia","Africa","Africa","The Americas","Europe","The Americas","Asia","Africa","Africa","Africa","The Americas","Africa","Africa","The Americas","The Americas","The Americas","Europe","Europe","Europe","Africa","Europe","The Americas","Africa","The Americas","Africa","Africa","Europe","Europe","Africa","Europe","Oceania","Europe","Oceania","Africa","Europe","Asia","Africa","Africa","Africa","Africa","Africa","Europe","The Americas","The Americas","The Americas","Oceania","The Americas","Asia","The Americas","Europe","The Americas","Europe","Asia","Asia","Europe","Middle East","Middle East","Europe","Middle East","Europe","The Americas","Middle East","Asia","Asia","Africa","Asia","Asia","Oceania","Asia","Middle East","Asia","Middle East","Africa","Africa","The Americas","Europe","Asia","Africa","Europe","Europe","Europe","Asia","Africa","Europe","Africa","Asia","The Americas","Europe","Africa","Europe","Asia","Europe","Asia","Africa","Africa","Africa","Africa","Asia","Africa","Oceania","Africa","Africa","The Americas","Europe","Europe","Asia","Oceania","Middle East","Asia","The Americas","The Americas","Asia","Oceania","Europe","The Americas","Europe","The Americas","Oceania","Middle East","Europe","Europe","Africa","Middle East","Africa","Africa","Asia","Oceania","Africa","The Americas","Africa","Europe","Africa","Africa","The Americas","Europe","Europe","Europe","Africa","Africa","Middle East","Africa","Africa","Asia","Asia","Asia","Asia","Oceania","The Americas","Africa","Europe","Africa","Africa","Europe","The Americas","The Americas","Asia","The Americas","The Americas","The Americas","Asia","Oceania","Middle East","Oceania","Middle East","Africa","Africa","Africa","Africa")
mydf <- data.frame("Country"=Countries_2012_Dataset,
"Code"=Codes_2012_Dataset,
"Region"=Regions_2012_Dataset)
head(mydf)
head(stats)
head(stats)
head(mydf)
#................Merging Data Frames
head(stats)
head(mydf)
merged <- merge(stats,mydf,by.x="Country.Code",by.y = "Code")
merged
colnames(merged)
merged$Country <- NULL
merged
head(merged)
colnames(merged)
str(merged)
#.................Visualizing with qplot
qplot(data=merged,x=Internet.users,y=Birth.rate)
qplot(data=merged,x=Internet.users,y=Birth.rate,colour=Region)
qplot(data=merged,x=Internet.users,y=Birth.rate,
colour=Region,size=I(5),shape=I(17))
#1. Shapes
qplot(data=merged,x=Internet.users,y=Birth.rate,
colour=Region,size=I(5),shape=I(4))
#1. Shapes
qplot(data=merged,x=Internet.users,y=Birth.rate,
colour=Region,size=I(5),shape=I(14))
#1. Shapes
qplot(data=merged,x=Internet.users,y=Birth.rate,
colour=Region,size=I(5),shape=I(25))
#1. Shapes
qplot(data=merged,x=Internet.users,y=Birth.rate,
colour=Region,size=I(5),shape=I(21))
#1. Shapes
qplot(data=merged,x=Internet.users,y=Birth.rate,
colour=Region,size=I(5),shape=I(26))
#1. Shapes
qplot(data=merged,x=Internet.users,y=Birth.rate,
colour=Region,size=I(5),shape=I(21))
#2. Transparency
qplot(data=merged,x=Internet.users,y=Birth.rate,
colour=Region,size=I(5),shape=I(19))
#2. Transparency
qplot(data=merged,x=Internet.users,y=Birth.rate,
colour=Region,size=I(2),shape=I(19))
#2. Transparency
qplot(data=merged,x=Internet.users,y=Birth.rate,
colour=Region,size=I(2),shape=I(19),alpha=I(0.6))
#2. Transparency
qplot(data=merged,x=Internet.users,y=Birth.rate,
colour=Region,size=I(2),
shape=I(19),alpha=I(0.6)) #alpha varies from 0 to 1
#3. Title
qplot(data=merged,x=Internet.users,y=Birth.rate,
colour=Region,size=I(2),
shape=I(19),alpha=I(0.6),main = "Birth Rate Vs Internet Users") #alpha varies from 0 to 1
v1 <- c("House in Hollywood","House in London","House in Japan")
v2 <- c(2000000,5000000,29580000)
v3 <- c("US Dollars","Pounds","Yen")
Real.Estate(House<-v1,Price<-v2,Currency<-v3)
Real.Estate<- data.frame(House<-v1,Price<-v2,Currency<-v3)
Real.Estate
Real.Estate<- data.frame(House = v1,
Price = v2,Currency = v3)
rm(real.Estate)
rm(Real.Estate)
Real.Estate<- data.frame(House = v1,
Price = v2,Currency = v3)
View(Real.Estate)
rm(Real.Estate)
Real.Estate<- data.frame(House = v1,
Price = v2,Currency = v3)
rm(Real.Estate)
#ggplot2
...Advanced Ratings
#Grammar of Graphics
#ggplot2...............Advanced Ratings
#Grammar of Graphics
#Movies Ratings
movies<-read.csv("Movie Ratings.csv")
#ggplot2...............Advanced Ratings
#Grammar of Graphics
#Movies Ratings
movies<-read.csv("Movie-Ratings.csv")
#ggplot2...............Advanced Ratings
#Grammar of Graphics
#Movies Ratings
movies <- read.csv("Movie-Ratings.csv")
getwd()
#ggplot2...............Advanced Ratings
#Grammar of Graphics
#Movies Ratings
movies <- read.csv(file.choose())
View(Games)
movies <- read.csv(file.choose())
head(movies)
head(movies,5)
colnames(movies)
colnames(movies) <- c("Film","Genre","CriticRating","AudienceRating","BudgetMillions","Year")
colnames(movies)
head(movies,5)
tail(movies,5)
str(movies)
View(movies)
View(movies)
str(movies)
summary(movies)
actor variable
#we do not want to use years as numbers
#converting non numeric variable into factor variable
#we do not want to use years as numbers
factor(movies$Year)
movies$Year <- factor(movies$Year)
summary(movies)
str(movies)
#...............Aesthetics layer of visualization
library(ggplot2)
#...............Aesthetics layer of visualization --means how to map the data
#................how do we want to see
library(ggplot2)
ggplot(data=movies,aes(x=CriticalRating,y=AudienceRating))
ggplot(data=movies,aes(x=CriticRating,y=AudienceRating))
nly aesthetics layer is not enough we are required to user geometric
#layer
#but only aesthetics layer is not enough we are required to user geometric
#layer
ggplot(data=movies,aes(x=CriticRating,y=AudienceRating))+geom_point()
ggplot(data=movies,aes(x=CriticRating,y=AudienceRating,colour=Genre))+
geom_point()
view(movies)
View(movies)
View(movies)
#..................add size in a better way
ggplot(data=movies,aes(x=CriticRating,y=AudienceRating,
colour=Genre,size=BudgetMillions))+
geom_point()
#........plotting with layers
p<- ggplot(data=movies,aes(x=CriticRating,y=AudienceRating,
colour=Genre,size=BudgetMillions))+
geom_point()
View(p)
p[["mapping"]]
p<- ggplot(data=movies,aes(x=CriticRating,y=AudienceRating,
colour=Genre,size=BudgetMillions))
p+geom_point()
p
p+geom_point()
#point
p+geom_point()
#...........lines
p+geom_line()
#Multiple layers
p+geom_point()+geom_line()
p+geom_line()+geom_point()
q <- ggplot(data=movix=CriticalRating,y=AudienceRating,colour=Genre,
size=BudgetMillions))
#............Overriding Aesthethics
q <- ggplot(data=movix=CriticalRating,y=AudienceRating,colour=Genre,
size=BudgetMillions)
#............Overriding Aesthethics
q <- ggplot(data=movix=CriticalRating,y=AudienceRating,
colour=Genre, size=BudgetMillions)
#............Overriding Aesthethics
q <- ggplot(data=movies,x=CriticalRating,y=AudienceRating,
colour=Genre, size=BudgetMillions)
#..........Add geom layer
q+geom_point()
q <- ggplot(data=movies,x=CriticalRating,
y=AudienceRating,colour=Genre,
size=BudgetMillions)
q + geom_point()
#............Overriding Aesthethics
q <- ggplot(data=movies,aes(x=CriticalRating,
y=AudienceRating,colour=Genre,
size=BudgetMillions))
q + geom_point()
#............Overriding Aesthethics
q <- ggplot(data=movies,aes(x=CriticRating,
y=AudienceRating,colour=Genre,
size=BudgetMillions))
q + geom_point()
#ex2
q+geom_point(aes(colour=BudgetMillions))
#overriding aes
#ex1
q+geom_point(aes(size=CriticRating))
q+geom_point()
#ex-3
q+geom_point(aes(x=BudgetMillions))
#ex-3
q+geom_point(aes(x=BudgetMillions))+
xlab("Budget Millions$$$")
#ex-4
q+geom_line()+geom_point()
#ex-4
q+geom_line(size=1)+geom_point()
q+geom_point(aes(x=BudgetMillions))+
xlab("Budget Millions$$$")
source('~/New folder/ggplot3.R', echo=TRUE)
r <- ggplot(data=movies,aes(x=CriticRating,y=AudienceRating))
r+geom_point()
r <- ggplot(data=movies,aes(x=CriticRating,
y=AudienceRating,color=year))
r <- ggplot(data=movies,aes(x=CriticRating,
y=AudienceRating,color=year))
r+geom_point()
r <- ggplot(data=movies,aes(x=CriticRating,
y=AudienceRating,color=Year))
r+geom_point()
#1. Mapping (What we've done so far)
#......Adding color by mapping
#1. Mapping (What we've done so far)
r + geom_point(aes(colour = Genre))
#2. Setting:
r + geom_point(colour="DarkGreen")
#Error
r+geom_point(aes(colour="DarkGreen"))
#r+geom_point(aes(colour="DarkGreen"))
#1. Mapping
r + geom_point(aes(size=BudgetMillions))
r <- ggplot(data=movies,aes(x=CriticRating,
y=AudienceRating))
r+geom_point()
r + geom_point(aes(size=BudgetMillions))
#2. Setting
r + geom_point(size=10)
r+geom_point(aes(size=10))
#Error:
r+geom_point(aes(size=10))
#..........Histograms And Density Charts
s <- ggplot(data=movies,aes(x=BudgetMillions))
s+geom_histogram(binwidth = 10)
s+geom_histogram(binwidth = 5)
#Add colour set the color
s + geom_histogram(binwidth = 10,fill= "green")
s+geom_histogram(binwidth = 10, aes(fill= Genre))
#add a border
s+geom_histogram(binwidth = 10, aes(fill= Genre),colours="Black")
#add a border
s+geom_histogram(binwidth = 10, aes(fill= Genre),colour="Black")
#add a border
s+geom_histogram(binwidth = 10,
aes(fill= Genre),colour="Black")
#density chart
s+geom_density(aes(fill=Genre))
S+geom_density(aes(fill=Genre),position="stack")
s+geom_density(aes(fill=Genre),position="stack")
s+geom_histogram(binwidth = 10,
aes(fill= Genre),colour="Black")
s+geom_density(aes(fill=Genre),position="stack")
#...........starting layer tips
t <- ggplot(data=movies,aes(x=AudienceRating))
#...........starting layer tips
library(ggplot)
#...........starting layer tips
library(ggplot2)
t <- ggplot(data=movies,aes(x=AudienceRating))
t+geom_histogram(binwidth = 10, fill="white",colour="Blue")
t+geom_histogram(binwidth = 10,
fill="white",colour="Blue")
t + geom_histogram(binwidth = 10,
aes(x=AudienceRating),
fill="White",colour="Blue")
#>>>4
t + geom_histogram(binwidth = 10,aes(x=CriticRating),
fill="White",colour="Blue")
t + geom_histogram(binwidth=10,
fill="White",colour="Blue")
t + geom_histogram(binwidth=10,
fill="White",colour="Blue")
t <- ggplot(data=movies,aes(x=AudienceRating))
#starting layer tips
library(ggplot2)
t <- ggplot(data=movies,aes(x=AudienceRating))
t + geom_histogram(binwidth=10,
fill="White",colour="Blue")
#another way
t <- ggplot(data = movies)
t + geom_histogram(binwidth = 10, aes(x=AudienceRating),
fill="white",colour="Blue")
#
t + geom_histogram(binwidth = 10, aes(x=CriticRating),fill="White", colour="Blue")
#..............statistical transformation
?geom_smooth()
#..............statistical transformation
?geom_smooth
u <- ggplot(data = movies,aes(x=CriticRating,
y=AudienceRating,colour=Genre))
library(ggplot)
library(ggplot2)
u <- ggplot(data = movies,aes(x=CriticRating,
y=AudienceRating,colour=Genre))
u + geom_point()
u + geom_point()+ geom_smooth(fill = NA)
u + geom_point()+ geom_smooth(fill = NA)
u+geom_boxplot()
#importing the dataset
library('tidyverse')
library(readr)
Social_Network_Ads <- read_csv("Social_Network_Ads.csv")
View(Social_Network_Ads)
dataset = read_csv('Social_Network_Ads.csv')
head(dataset,5)
dataset = dataset[3:5]
head(dataset,5)
dataset$Purchased = factor(dataset$Purchased,
levels = c(0, 1))
dataset$Purchased = factor(dataset$Purchased,
levels = c(0, 1))
#splitting the dataset into the training set and training set
library(caTools)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(class)
?knn
library(class)
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5,
prob = TRUE)
library(class)
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set$Purchased,
k = 5,
prob = TRUE)
y_pred
library(class)
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set$Purchased,
k = 5,)
y_pred
cm = table(test_set[, 3], y_pred)
#Making the confusion matrix
cm =table(test_set$Purchased,y_pred)
cm
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
y_grid = knn(train = training_set[, -3], test = grid_set,
cl = training_set$Purchased, k = 5)
plot(set[, -3],
main = 'K-NN (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set,
cl = training_set$Purchased, k = 5)
plot(set[, -3],
main = 'K-NN (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set,
cl = training_set$Purchased, k = 5)
plot(set[, -3],
main = 'K-NN (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("C:/Users/Ashish Kumar/Desktop/temp")
#importing the dataset
library("tidyverse")
dataset = read_csv('Social_Network_Ads.csv')
library("tidyverse")
dataset = read_csv('Social_Network_Ads.csv')
dataset= dataset[3:5]
View(dataset)
#splitting the dataset into training set and test set
library(caTools)
